// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package mysql

import (
	"context"
	"database/sql"
)

const createCountry = `-- name: CreateCountry :execresult
INSERT INTO countries (
  Name
) VALUES (
  ?
)
`

func (q *Queries) CreateCountry(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCountry, name)
}

const deleteCountry = `-- name: DeleteCountry :exec
DELETE FROM countries
WHERE Id = ?
`

func (q *Queries) DeleteCountry(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCountry, id)
	return err
}

const getCountry = `-- name: GetCountry :one
SELECT id, name FROM countries
WHERE ID = ? LIMIT 1
`

func (q *Queries) GetCountry(ctx context.Context, id int32) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountry, id)
	var i Country
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listCountries = `-- name: ListCountries :many
SELECT id, name FROM countries
ORDER BY Name
`

func (q *Queries) ListCountries(ctx context.Context) ([]Country, error) {
	rows, err := q.db.QueryContext(ctx, listCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
